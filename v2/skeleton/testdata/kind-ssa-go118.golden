-- example/cmd/example/main.go --
package main

import (
	"example.com/example"
	"golang.org/x/tools/go/analysis/unitchecker"
)

func main() { unitchecker.Main(example.Analyzer) }
-- example/example.go --
package example

import (
	"fmt"

	"golang.org/x/tools/go/analysis"
	"golang.org/x/tools/go/analysis/passes/buildssa"
)

const doc = "example is ..."

// Analyzer is ...
var Analyzer = &analysis.Analyzer{
	Name: "example",
	Doc:  doc,
	Run:  run,
	Requires: []*analysis.Analyzer{
		buildssa.Analyzer,
	},
}

func run(pass *analysis.Pass) (any, error) {
	s := pass.ResultOf[buildssa.Analyzer].(*buildssa.SSA)
	for _, f := range s.SrcFuncs {
		fmt.Println(f)
		for _, b := range f.Blocks {
			fmt.Printf("\tBlock %d\n", b.Index)
			for _, instr := range b.Instrs {
				fmt.Printf("\t\t%[1]T\t%[1]v\n", instr)
				for _, v := range instr.Operands(nil) {
					if v != nil {
						fmt.Printf("\t\t\t%[1]T\t%[1]v\n", *v)
					}
				}
			}
		}
	}
	return nil, nil
}
-- example/example_test.go --
package example_test

import (
	"testing"

	"example.com/example"
	"github.com/gostaticanalysis/testutil"
	"golang.org/x/tools/go/analysis/analysistest"
)

// TestAnalyzer is a test for Analyzer.
func TestAnalyzer(t *testing.T) {
	testdata := testutil.WithModules(t, analysistest.TestData(), nil)
	analysistest.Run(t, testdata, example.Analyzer, "a")
}
-- example/go.mod --
module example.com/example

go 1.18

-- example/testdata/src/a/a.go --
package a

func f() {
	// The pattern can be written in regular expression.
	var gopher int // want "pattern"
	print(gopher)  // want "identifier is gopher"
}
-- example/testdata/src/a/go.mod --
module a

go 1.18

