-- example/cmd/example/main.go --
package main

import (
	"example.com/example"
	"github.com/gostaticanalysis/codegen/singlegenerator"
)

func main() {
	singlegenerator.Main(example.Generator)
}
-- example/example.go --
package example

import (
	"bytes"
	"fmt"
	"go/format"
	"go/types"
	"os"

	"github.com/gostaticanalysis/analysisutil"
	"github.com/gostaticanalysis/codegen"
	"github.com/gostaticanalysis/knife"
)

const doc = "example is ..."

var (
	flagOutput string
)

func init() {
	Generator.Flags.StringVar(&flagOutput, "o", "", "output file name")
}

var Generator = &codegen.Generator{
	Name: "example",
	Doc:  doc,
	Run:  run,
}

func run(pass *codegen.Pass) error {
	ifaces := map[string]*knife.Interface{}

	s := pass.Pkg.Scope()
	for _, name := range s.Names() {
		obj := s.Lookup(name)
		if !obj.Exported() {
			continue
		}
		iface, _ := analysisutil.Under(obj.Type()).(*types.Interface)
		if iface != nil {
			ifaces[name] = knife.NewInterface(iface)
		}
	}

	td := &knife.TempalteData{
		Fset:      pass.Fset,
		Files:     pass.Files,
		TypesInfo: pass.TypesInfo,
		Pkg:       pass.Pkg,
	}
	t, err := knife.NewTemplate(td).Parse(tmpl)
	if err != nil {
		return err
	}

	var buf bytes.Buffer
	if err := t.Execute(&buf, ifaces); err != nil {
		return err
	}

	src, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}

	if flagOutput == "" {
		pass.Print(string(src))
		return nil
	}

	f, err := os.Create(flagOutput)
	if err != nil {
		return err
	}

	fmt.Fprint(f, string(src))

	if err := f.Close(); err != nil {
		return err
	}

	return nil
}

var tmpl = `// Code generated by example; DO NOT EDIT.
package {{(pkg).Name}}
{{range $tn, $t := .}}
type Mock{{$tn}} struct {
{{- range $n, $f := $t.Methods}}
        {{$n}}Func {{$f.Signature}}
{{- end}}
}
{{range $n, $f := $t.Methods}}
func (m *Mock{{$tn}}) {{$n}}({{range $f.Signature.Params}}
	{{- if (and $f.Signature.Variadic (eq . (last $f.Signature.Params)))}}
        	{{- .Name}} ...{{(slice .Type).Elem}},
	{{- else}}
        	{{- .Name}} {{.Type}},
	{{- end}}
{{- end}}) ({{range $f.Signature.Results}}
        {{- .Name}} {{.Type}},
{{- end}}) {
        {{if $f.Signature.Results}}return {{end}}m.{{$n}}Func({{range $f.Signature.Params}}
		{{- if (and $f.Signature.Variadic (eq . (last $f.Signature.Params)))}}
        		{{- .Name}}...,
		{{- else}}
        		{{- .Name}},
		{{- end}}
        {{- end}})
}
{{end}}
{{end}}
`
-- example/example_test.go --
package example_test

import (
	"flag"
	"os"
	"testing"

	"example.com/example"
	"github.com/gostaticanalysis/codegen/codegentest"
)

var flagUpdate bool

func TestMain(m *testing.M) {
	flag.BoolVar(&flagUpdate, "update", false, "update the golden files")
	flag.Parse()
	os.Exit(m.Run())
}

func TestGenerator(t *testing.T) {
	rs := codegentest.Run(t, codegentest.TestData(), example.Generator, "a")
	codegentest.Golden(t, rs, flagUpdate)
}
-- example/go.mod --
module example.com/example

go 1.18

-- example/testdata/src/a/a.go --
package a

type DB interface {
	Get(id string) int
	Set(id string, v int)
}

type db struct{}

func (db) Get(id string) int    { return 0 }
func (db) Set(id string, v int) {}

type Logger interface {
	Infof(format string, args ...interface{})
	Errorf(format string, args ...interface{})
}
-- example/testdata/src/a/example.golden --
// Code generated by example; DO NOT EDIT.
package a

type MockDB struct {
	GetFunc func(id string) int
	SetFunc func(id string, v int)
}

func (m *MockDB) Get(id string) int {
	return m.GetFunc(id)
}

func (m *MockDB) Set(id string, v int) {
	m.SetFunc(id, v)
}

type MockLogger struct {
	ErrorfFunc func(format string, args ...interface{})
	InfofFunc  func(format string, args ...interface{})
}

func (m *MockLogger) Errorf(format string, args ...interface{}) {
	m.ErrorfFunc(format, args...)
}

func (m *MockLogger) Infof(format string, args ...interface{}) {
	m.InfofFunc(format, args...)
}
-- example/testdata/src/a/go.mod --
module a

go 1.18

