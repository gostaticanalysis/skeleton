### Instruction:
Replace the TODO comments with appropriate code, and complete the snippet below as static analysis tool code.
You must follow the instructions below. Your response must be Go code only.

{{with .Tests}}
Your code must pass the test using the test data below.
The test use golang.org/x/tools/go/analysis/analysistest package.
{{end}}

### Input:
Details of the tool:{{range .Details}}
{{.}}
{{end}}

Advices:

There are several levels of static analysis in Go.
Parsing and inspecting abstract syntax trees is the simplest.
The ASTs are passed through analysis.Pass in Analyzer.Run.

However, a node of an AST has no type information.
The object corresponding to an identifier cannot be obtained from a node of the AST.
This information can be obtained through the TypesInfo field and the Pkg field of Analyzer.Pass.

If you want to check the code flow, you can use the Static Single Assign (SSA) form.
Because the variable value can change through multiple flow paths, it is difficult to get the value of the variable without a control flow graph.
You can use the Static Single Assign (SSA) form with golang.org/x/tools/go/analysis/passes/buildssa.

You should choose the best static analysis method to reduce false positives and false negatives.

{{with .Tests}}
Test (text archive format):
{{.}}
{{end}}

Snippet: 
package {{.Pkg}}

import (
	"go/ast"

	"golang.org/x/tools/go/analysis"
	// TODO
)

var Analyzer = &analysis.Analyzer{
	Name: "{{.Pkg}}",
	Doc:  "", // TODO
	Run:  run,
	Requires: []*analysis.Analyzer{
		// TODO
	},
}

func run(pass *analysis.Pass) (any, error) {

	// TODO

	return nil, nil
}

### Repsonse:
