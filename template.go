// Code generated by _tools/txtar/main.go; DO NOT EDIT.

package main

import "text/template"

var tmpl = template.Must(template.New("template").Delims(`@@`, `@@`).Parse("-- @@.Pkg@@.go --\npackage @@.Pkg@@\n\nimport (\n\t\"go/ast\"\n\n\t\"golang.org/x/tools/go/analysis\"\n\t\"golang.org/x/tools/go/analysis/passes/inspect\"\n\t\"golang.org/x/tools/go/ast/inspector\"\n)\n\nconst doc = \"@@.Pkg@@ is ...\"\n\n// Analyzer is ...\nvar Analyzer = &analysis.Analyzer{\n\tName: \"@@.Pkg@@\",\n\tDoc:  doc,\n\tRun:  run,\n\tRequires: []*analysis.Analyzer{\n\t\tinspect.Analyzer,\n\t},\n}\n\nfunc run(pass *analysis.Pass) (interface{}, error) {\n\tinspect := pass.ResultOf[inspect.Analyzer].(*inspector.Inspector)\n\n\tnodeFilter := []ast.Node{\n\t\t(*ast.Ident)(nil),\n\t}\n\n\tinspect.Preorder(nodeFilter, func(n ast.Node) {\n\t\tswitch n := n.(type) {\n\t\tcase *ast.Ident:\n\t\t\tif n.Name == \"gopher\" {\n\t\t\t\tpass.Reportf(n.Pos(), \"identifier is gopher\")\n\t\t\t}\n\t\t}\n\t})\n\n\treturn nil, nil\n}\n\n-- @@.Pkg@@_test.go --\npackage @@.Pkg@@_test\n\nimport (\n\t\"testing\"\n\n\t\"@@.ImportPath@@\"\n\t\"github.com/gostaticanalysis/testutil\"\n\t\"golang.org/x/tools/go/analysis/analysistest\"\n)\n\n// TestAnalyzer is a test for Analyzer.\nfunc TestAnalyzer(t *testing.T) {\n\ttestdata := testutil.WithModules(t, analysistest.TestData(), nil)\n\tanalysistest.Run(t, testdata, @@.Pkg@@.Analyzer, \"a\")\n}\n\n-- cmd/@@.Pkg@@/main.go --\n@@ if .Cmd -@@\npackage main\n\nimport (\n\t\"@@.ImportPath@@\"\n\t\"golang.org/x/tools/go/analysis/@@.Checker@@checker\"\n)\n\nfunc main() { @@.Checker@@checker.Main(@@.Pkg@@.Analyzer) }\n@@end@@\n-- plugin/main.go --\n@@ if .Plugin -@@\n// This file can build as a plugin for golangci-lint by below command.\n//    go build -buildmode=plugin -o path_to_plugin_dir @@.ImportPath@@/plugin/@@.Pkg@@\n// See: https://golangci-lint.run/contributing/new-linters/#how-to-add-a-private-linter-to-golangci-lint\n\npackage main\n\nimport (\n\t\"strings\"\n\n\t\"@@.ImportPath@@\"\n\t\"golang.org/x/tools/go/analysis\"\n)\n\n// flags for Analyzer.Flag.\n// If you would like to specify flags for your plugin, you can put them via 'ldflags' as below.\n//     $ go build -buildmode=plugin -ldflags \"-X 'main.flags=-opt val'\" @@.ImportPath@@/plugin/@@.Pkg@@\nvar flags string\n\n// AnalyzerPlugin provides analyzers as a plugin.\n// It follows golangci-lint style plugin.\nvar AnalyzerPlugin analyzerPlugin\n\ntype analyzerPlugin struct{}\n\nfunc (analyzerPlugin) GetAnalyzers() []*analysis.Analyzer {\n\tif flags != \"\" {\n\t\tflagset := @@.Pkg@@.Analyzer.Flags\n\t\tif err := flagset.Parse(strings.Split(flags, \" \")); err != nil {\n\t\t\tpanic(\"cannot parse flags of @@.Pkg@@: \" + err.Error())\n\t\t}\n\t}\n\treturn []*analysis.Analyzer{\n\t\t@@.Pkg@@.Analyzer,\n\t}\n}\n@@end@@\n-- testdata/src/a/a.go --\npackage a\n\nfunc f() {\n\t// The pattern can be written in regular expression.\n\tvar gopher int // want \"pattern\"\n\tprint(gopher)  // want \"identifier is gopher\"\n}\n\n-- testdata/src/a/go.mod --\nmodule a\n\ngo 1.15\n"))
